---
import { getPosts, getPost } from '../../utils/sanity';
import type { InferGetStaticParamsType } from 'astro';
import { PortableText } from '~/components/PortableText/PortableText';
import Layout from '../_layout.astro';
import { Heading } from '~/components/Heading';
import { TableOfContents } from '~/components/TableOfContents';
import { Container } from '~/components/Container';
// import { GridBackground, Spotlight } from '~/components/blocks/spotlight-new';
import { Hero } from '~/components/Hero';
import { RiGithubFill } from '@remixicon/react';
import { Overline } from '~/components/Overline';
import { formatDate } from '~/utils/misc';

export async function getStaticPaths() {
  const posts = await getPosts({
    preview: false,
  });
  return posts.map((post) => ({
    params: { slug: post.slug },
  }));
}

type Params = InferGetStaticParamsType<typeof getStaticPaths>;
const { slug } = Astro.params as Params;

const post = await getPost({
  preview: Astro.locals.preview,
  options: Astro.locals.loadQueryOptions,
  slug,
});

if (!post) {
  return new Response(null, {
    status: 404,
    statusText: 'Post Not found',
  });
}

const {
  title,
  excerpt,
  body,
  tags,
  image,
  toc,
  repo,
  seo,
  _type,
  _id,
  publishedAt,
  updatedAt,
} = post;
---

<Layout seo={seo ?? undefined} _type={_type} _id={_id}>
  <article>
    <Hero client:visible>
      <div class="col-span-12 mx-auto max-w-3xl">
        {
          publishedAt ? (
            <Overline className="justify-self-center">
              {formatDate(publishedAt)}
            </Overline>
          ) : null
        }
        {
          title ? (
            <Heading level="h1" className="text-center">
              {title}
            </Heading>
          ) : null
        }
        {
          excerpt ? (
            <p class="mx-auto max-w-3xl text-center text-zinc-500">{excerpt}</p>
          ) : null
        }
      </div>
    </Hero>
    <Container
      className="prose grid grid-cols-3 gap-8 py-14 prose-zinc md:max-w-2xl lg:max-w-5xl xl:gap-16 dark:prose-invert prose-a:text-primary prose-a:no-underline prose-a:hover:underline prose-ol:marker:text-foreground prose-ul:marker:text-foreground"
    >
      <div class="not-prose order-2 max-lg:hidden">
        <div
          class="sticky top-14 col-span-1 flex flex-col gap-8 overflow-x-hidden pt-10 pb-24"
        >
          {Array.isArray(toc) && <TableOfContents toc={toc} client:visible />}
          {
            repo ? (
              <div class="flex flex-col gap-3">
                <h3 class="my-0! text-sm/6 font-medium tracking-widest text-muted uppercase sm:text-xs/6">
                  Useful Links
                </h3>
                <a
                  href={repo}
                  target="_blank"
                  rel="noopener noreferrer"
                  class="my-0! w-fit"
                >
                  <span class="sr-only">View Repo</span>
                  <RiGithubFill className="fill-foreground hover:fill-primary transition-colors" />
                </a>
              </div>
            ) : null
          }
          {
            Array.isArray(tags) && (
              <div class="flex flex-col gap-3">
                <h3 class="my-0! text-sm/6 font-medium tracking-widest text-muted uppercase sm:text-xs/6">
                  Tags
                </h3>
                <ul class="mt-0 flex flex-wrap gap-2">
                  {tags.map((tag) => (
                    <li>
                      <a
                        class="inline-block rounded-lg bg-zinc-100 px-3 py-0.5 text-sm/6 text-muted transition-colors duration-200 hover:bg-primary! hover:text-background dark:bg-zinc-950 dark:text-zinc-300 dark:hover:text-white"
                        href={`/blog/tags/${tag.slug}`}
                      >
                        {tag.title}
                      </a>
                    </li>
                  ))}
                </ul>
              </div>
            )
          }
        </div>
      </div>
      {
        body ? (
          <section class="order-1 col-span-3 *:*:first:mt-0! lg:col-span-2 lg:pt-10 lg:pb-24">
            <PortableText portableText={body} blog client:visible />
            {updatedAt ? (
              <p class="mt-8 text-sm/6 text-muted">
                Last updated{' '}
                <time datetime={formatDate(updatedAt)}>
                  {formatDate(updatedAt, {
                    relative: true,
                  })}
                </time>
              </p>
            ) : null}
          </section>
        ) : null
      }
    </Container>
  </article>
</Layout>
