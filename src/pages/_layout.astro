---
import { VisualEditing } from '@sanity/astro/visual-editing';
import Footer from '~/components/Footer.astro';
import Header from '~/components/Header.astro';
import ExitPreview from '~/components/Preview/Exit';
import SanityLiveMode from '~/components/Preview/SanityLiveMode';
import '~/styles/tailwind.css';
import { getSettings } from '~/utils/sanity';
import { getTheme } from '~/utils/theme';
import { type Seo } from '~/types/seo';

import '@fontsource/inter';
import '@fontsource/inter/300.css';
import '@fontsource/inter/300-italic.css';
import '@fontsource/inter/400-italic.css';
import '@fontsource/inter/500.css';
import '@fontsource/inter/700.css';
import '@fontsource/inter/700-italic.css';
import { stegaClean } from '@sanity/client/stega';
import { getOgImage } from '~/utils/seo';
interface Props {
  seo?: Seo;
  _type?: string;
  _id?: string;
}

const { preview } = Astro.locals;

const { seo, _type, _id } = Astro.props;

const title = stegaClean(seo?.title);
const metaDescription = stegaClean(seo?.metaDescription);
const keywords = stegaClean(seo?.keywords);

const settings = await getSettings({
  preview: Astro.locals.preview,
  options: Astro.locals.loadQueryOptions,
});

const { siteTitle, favicon, social } = settings;
const siteTitleClean = stegaClean(siteTitle);

const x = stegaClean(
  social?.find((profile) => stegaClean(profile.platform) === 'x')
);

const ogImage = getOgImage({
  type: _type ?? undefined,
  id: _id ?? undefined,
});

const url = Astro.request.url;

const theme = getTheme(Astro.cookies);
---

<html
  lang="en"
  class:list={[
    'min-w-xs font-sans selection:bg-primary selection:text-white',
    theme === 'dark' ? 'dark' : undefined,
  ]}
>
  <head>
    <meta charset="utf-8" />
    <!-- <link rel="icon" type="image/svg+xml" href="/favicon.svg" /> -->
    <link rel="icon" href={favicon} type="image/svg+xml" />
    <link rel="canonical" href={url} />
    <meta name="viewport" content="width=device-width" />
    <link rel="mask-icon" href="/safari-pinned-tab.svg" />
    <title>{title ? `${title} â€¢ ` : ''}{siteTitleClean}</title>
    {
      metaDescription && (
        <>
          <meta name="description" content={metaDescription} />
          <meta property="og:description" content={metaDescription} />
        </>
      )
    }
    {siteTitleClean && <meta name="author" content={siteTitleClean} />}
    {keywords && <meta name="keywords" content={keywords.join(', ')} />}
    {title && <meta property="og:title" content={title} />}
    {url && <meta property="og:url" content={url} />}
    <meta property="og:country_name" content="US" />
    {
      ogImage && (
        <>
          <meta property="og:image" content={ogImage} />
          <meta property="og:image:width" content="1200" />
          <meta property="og:image:height" content="630" />
          <meta property="og:image:alt" content={title} />
          <meta property="og:image:secure_url" content={ogImage} />
        </>
      )
    }
    {
      x && ogImage && (
        <>
          <meta property="og:type" content="website" />
          <meta name="twitter:card" content="summary_large_image" />
          {x.handle && <meta name="twitter:creator" content={`@${x.handle}`} />}
          {title && <meta name="twitter:title" content={title} />}
          {metaDescription && (
            <meta name="twitter:description" content={metaDescription} />
          )}
          {url && <meta name="twitter:url" content={url} />}
          <meta name="twitter:image" content={ogImage} />
        </>
      )
    }
  </head>

  <body
    class="flex min-h-dvh flex-col bg-stone-200 bg-[image:radial-gradient(var(--pattern-fg)_1px,_transparent_0)] bg-[size:10px_10px] bg-fixed [--pattern-fg:var(--color-zinc-950)]/5 dark:bg-zinc-900 dark:[--pattern-fg:var(--color-white)]/5"
  >
    <Header theme={theme} />
    <main class="w-full grow">
      <slot />
    </main>
    <Footer siteTitle={siteTitle} social={social} />
    {
      preview ? (
        <>
          <SanityLiveMode client:only="react" />
          <VisualEditing enabled={preview} zIndex={1000} />
          <ExitPreview client:only="react" />
        </>
      ) : null
    }
  </body>
</html>
