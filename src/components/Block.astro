---
import type { Block } from '~/types/block';
import { TextBlock } from './TextBlock';
import { DescriptionGrid } from './DescriptionGrid';
import { Portfolio } from './Portfolio';
import { Hero } from './Hero';
import { Form } from './Form';
import { validateZodSchema } from '~/utils/validateZodSchema';
import { descriptionGridZ } from '~/types/descriptionGrid';
import { heroZ } from '~/types/hero';
import { portfolioZ } from '~/types/portfolio';
import { textBlockZ } from '~/types/textBlock';
import { formBlockZ } from '~/types/formBlock';
import type { FormBlock } from '~/types/formBlock';
import { textMarqueeBlockZ, type TextMarquee } from '~/types/textMarquee';
import { TextMarqueeBlock } from './TextMarqueeBlock';
import { stegaClean } from '@sanity/client/stega';
import { Image } from './Image';
import { PortableText } from './PortableText/PortableText';

export type Props = Block;

const props = Astro.props;
let validBlock = null;
try {
  switch (props._type) {
    case 'descriptionGrid': {
      const validationResult = validateZodSchema(props, [descriptionGridZ]);
      if (!validationResult.success) {
        console.error('Validation failed:', validationResult.issues);
        throw new Error('Invalid block data!');
      }

      validBlock = validationResult.data;
      break;
    }
    case 'form': {
      const validationResult = validateZodSchema(props, [formBlockZ]);
      if (!validationResult.success) {
        console.error('Validation failed:', validationResult.issues);
        throw new Error('Invalid block data!');
      }

      validBlock = validationResult.data as FormBlock;

      break;
    }
    case 'hero': {
      const validationResult = validateZodSchema(props, [heroZ]);
      if (!validationResult.success) {
        console.error('Validation failed:', validationResult.issues);
        throw new Error('Invalid block data!');
      }

      validBlock = validationResult.data;
      break;
    }
    case 'portfolio': {
      const validationResult = validateZodSchema(props, [portfolioZ]);
      if (!validationResult.success) {
        console.error('Validation failed:', validationResult.issues);
        throw new Error('Invalid block data!');
      }

      validBlock = validationResult.data;
      break;
    }
    case 'textBlock': {
      const validationResult = validateZodSchema(props, [textBlockZ]);
      if (!validationResult.success) {
        console.error('Validation failed:', validationResult.issues);
        throw new Error('Invalid block data!');
      }

      validBlock = validationResult.data;
      break;
    }
    case 'textMarqueeBlock': {
      const data = structuredClone(props);
      const cleanedData = {
        ...data,
        marquees: data.marquees.map((marquee: TextMarquee) => ({
          ...marquee,
          direction: stegaClean(marquee.direction),
        })),
      };

      const validationResult = validateZodSchema(cleanedData, [
        textMarqueeBlockZ,
      ]);
      if (!validationResult.success) {
        console.error('Validation failed:', validationResult.issues);
        throw new Error('Invalid block data!');
      }

      validBlock = validationResult.data;
      break;
    }
    default:
      break;
  }
} catch (err) {
  console.error(err);
}
---

{
  validBlock ? (
    <>
      {props._type === 'descriptionGrid' ? (
        <DescriptionGrid {...validBlock} client:visible />
      ) : null}
      {props._type === 'form' ? <Form {...validBlock} client:visible /> : null}
      {props._type === 'hero' ? (
        <Hero {...validBlock} client:visible>
          <div class="z-60 col-span-11 mt-auto max-xs:mb-4 xs:col-start-1 xs:col-end-8 xs:mt-16 [&_p]:lg:max-w-[85%]">
            {validBlock.valueProposition && (
              <PortableText portableText={validBlock.valueProposition} />
            )}
          </div>
          {validBlock.image?.image && (
            <div class="contents [&_img]:contrast-[1.1] [&_img]:dark:brightness-0 [&_img[data-lqip=true]]:gradient-mask-t-50">
              <Image
                id={validBlock.image.image.id}
                asset={validBlock.image.image}
                width={1280}
                height={817}
                loading="eager"
                queryParams={{
                  q: 100,
                }}
                className="pointer-events-none absolute bottom-0 right-0 z-50 aspect-square max-h-[400px] rounded-br-lg object-cover max-xs:-top-8 max-xs:left-0 max-xs:h-auto max-xs:max-h-[580px] max-xs:w-full max-xs:max-w-full max-xs:gradient-mask-b-[black_50%] xs:h-[580px] xs:max-h-[700px] xs:w-2/3 md:h-[700px] lg:w-[700px]"
                client:visible
              />
            </div>
          )}
        </Hero>
      ) : null}
      {props._type === 'portfolio' ? (
        <Portfolio {...validBlock} client:visible />
      ) : null}
      {props._type === 'textBlock' ? <TextBlock {...validBlock} /> : null}
      {props._type === 'textMarqueeBlock' ? (
        <TextMarqueeBlock {...validBlock} client:visible />
      ) : null}
    </>
  ) : null
}
